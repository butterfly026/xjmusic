// Copyright (c) 2017, Outright Mental Inc. (https://w.outright.io) All Rights Reserved.
package io.outright.xj.core.model.doc;

import io.outright.xj.core.app.exception.BusinessException;
import io.outright.xj.core.model.Entity;
import io.outright.xj.core.util.Text;

import org.jooq.Field;
import org.jooq.Record;

import com.google.api.client.util.Charsets;
import com.google.api.client.util.Maps;
import com.google.common.io.ByteStreams;

import org.json.JSONObject;

import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import java.util.Objects;

/**
 [#215] Internal "Docs" section where users of different permissions can view static content that is stored in .md static files on the backend, for easy editing.

 This is a wrapper for a Doc, which is an internal object,
 actually generated from source code when the project is compiled.

 This mechanism allows for documents tracked to the version of the source code
 to be made eitherOr with permissions only to logged-in users.
 */
public class Doc extends Entity {
  public static final String KEY_MANY = "docs";
  public static final String KEY_ONE = "doc";
  public static final String KEY_CONTENT = "content";
  public static final String KEY_NAME = "name";
  public static final String KEY_KEY = "key";

  // Key
  private String key;
  // Name
  private String name;
  // Content
  private String content;

  /**
   New DocKey model from a file name and buffered input stream

   @param key     of the file, from which a name will be determined
   @param content of the doc
   @return doc
   */
  public static Doc from(String key, InputStream content) {
    Doc doc = new Doc();
    doc.setKey(key);
    doc.setContent(content);
    return doc;
  }

  public String getKey() {
    return key;
  }

  // name has no setter; it's generated by setting the key

  public Doc setKey(String key) {
    this.key = Text.DocKey(key);
    this.name = Text.DocNameForKey(this.key);
    return this;
  }

  public String getName() {
    return name;
  }

  public String getContent() {
    return content;
  }

  private void setContent(InputStream content) {
    try {
      this.content = new String(ByteStreams.toByteArray(content), Charsets.UTF_8);
    } catch (IOException e) {
      this.content = "Unable to render content";
    }
  }

  @Override
  public void validate() throws BusinessException {
    if (this.name == null || this.name.length() == 0) {
      throw new BusinessException("DocKey name is required.");
    }
  }

  @Override
  public Doc setFromRecord(Record record) {
    if (Objects.isNull(record)) {
      return null;
    }
    return this;
  }

  @Override
  public Map<Field, Object> updatableFieldValueMap() {
    return Maps.newHashMap();
  }

  /**
   Output as JSON object

   @return JSON object
   */
  public JSONObject toJSONObject() {
    JSONObject output = new JSONObject();
    output.put(Doc.KEY_CONTENT, this.getContent());
    output.put(Doc.KEY_KEY, this.getKey());
    output.put(Doc.KEY_NAME, this.getName());
    return output;
  }

}
