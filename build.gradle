// Copyright (c) XJ Music Inc. (https://xj.io) All Rights Reserved.

plugins {
  id 'jacoco'
  id 'java'
  id 'maven'
  id 'nu.studer.jooq' version '4.1'
  id 'com.google.cloud.tools.jib' version '3.0.0' apply false
  id "org.flywaydb.flyway" version "7.5.4"
}

group = 'io.xj'
version = '1.0'

description = 'XJ Music platform backend services'

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

jacocoTestReport {
  reports {
    xml.enabled true
  }
}

allprojects {
  group = 'io.xj'
}

subprojects {
  apply plugin: 'java'

  repositories {
    mavenLocal()
    maven {
      url = 'https://repo.maven.apache.org/maven2'
    }
    maven {
      url = 'https://packages.confluent.io/maven/'
    }
  }

  group = 'io.xj'
  version = '1.0'

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
  }

}


// For access to private GitHub packages
def props = getGithubPropertiesFromFile('./github.properties')
def githubUsername = getGithubUsername(props)
def githubPassword = getGithubPassword(props)

subprojects {
  apply plugin: 'java'

  repositories {
    mavenCentral()
    mavenLocal()
    maven {
      name = 'GitHubPackages'
      url = 'https://maven.pkg.github.com/xjmusic/protocol'
      credentials {
        username = githubUsername
        password = githubPassword
      }
    }
  }

  java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
  }
}

static String getGithubUsername(Properties props) {
  String value
  if (props.getProperty('github.username')) {
    value = props.getProperty('github.username')
    println 'Github username (from property github.username): ' + value
  } else {
    value = System.getenv('GITHUB_USERNAME')
    if (!value) throw new Exception('Could not find required env GITHUB_USERNAME or prop "github.username"')
    println 'Github username (from env GITHUB_USERNAME): ' + value
  }
  return value
}

static String getGithubPassword(Properties props) {
  String value
  if (props.getProperty('github.token')) {
    value = props.getProperty('github.token')
    println 'Github password (from property github.token): ' + value.length() + ' characters'
  } else {
    value = System.getenv('GITHUB_TOKEN')
    if (!value) throw new Exception('Could not find required env GITHUB_TOKEN or prop "github.token"')
    println 'Github password (from env GITHUB_TOKEN): ' + value.length() + ' characters'
  }
  return value
}

Properties getGithubPropertiesFromFile(String pathToGithubPropertiesFile) {
  def githubPropertiesFile = file(pathToGithubPropertiesFile)
  def props = new Properties()
  if (githubPropertiesFile.exists()) {
    println('Will read Github properties from ' + pathToGithubPropertiesFile)
    githubPropertiesFile.withInputStream { props.load(it) }
  }
  return props
}
