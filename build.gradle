// Copyright (c) XJ Music Inc. (https://xj.io) All Rights Reserved.

plugins {
  id 'java'
  id 'distribution'
  id 'jacoco'
  id 'application'
  id 'com.google.cloud.tools.jib' version '3.1.1'
  id "org.sonarqube" version "3.3"
}

repositories {
  mavenLocal()
  maven {
    url = 'https://repo.maven.apache.org/maven2'
  }
  maven {
    url = 'https://packages.confluent.io/maven/'
  }
}

dependencies {
  //
  implementation 'io.xj:protocol:v0.30'
  // vendor
  implementation 'ch.qos.logback:logback-classic:1.2.3'
  implementation 'com.amazonaws:aws-java-sdk-secretsmanager:1.12.7'
  implementation 'com.amazonaws:aws-java-sdk:1.11.119'
  // implementation 'com.datadoghq:dd-java-agent:0.72.0'
  implementation 'com.datadoghq:java-dogstatsd-client:2.11.0'
  implementation 'com.fasterxml.jackson.core:jackson-annotations:2.10.1'
  implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.10.2.1'
  implementation 'com.fasterxml.jackson.module:jackson-module-guice:2.10.3'
  implementation 'com.github.axet:TarsosDSP:2.4-1'
  implementation 'com.github.rholder:snowball-stemmer:1.3.0.581.1'
  implementation 'com.google.api-client:google-api-client:1.30.9'
  implementation 'com.google.apis:google-api-services-plus:v1-rev590-1.25.0'
  implementation 'com.google.guava:guava:28.2-jre'
  implementation 'com.google.inject.extensions:guice-assistedinject:5.0.1'
  implementation 'com.google.inject:guice:5.0.1'
  implementation 'com.typesafe:config:1.4.0'
  implementation 'com.zaxxer:HikariCP:3.4.1'
  implementation 'commons-codec:commons-codec:1.10'
  implementation 'commons-io:commons-io:2.6'
  implementation 'javax.activation:activation:1.1'
  implementation 'javax.cache:cache-api:1.1.1'
  implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
  implementation 'me.xdrop:fuzzywuzzy:1.1.9'
  implementation 'net.logstash.logback:logstash-logback-encoder:6.6'
  implementation 'org.apache.httpcomponents:httpclient:4.5.8'
  implementation 'org.eclipse.jetty:jetty-server:9.4.26.v20200117'
  implementation 'org.eclipse.jetty:jetty-servlet:9.4.26.v20200117'
  implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.33'
  implementation 'org.glassfish.jersey.core:jersey-server:2.33'
  implementation 'org.glassfish.jersey.inject:jersey-hk2:2.33'
  implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:2.33'
  implementation 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-simple:2.33'
  implementation 'org.jooq:jooq-codegen:3.12.3'
  implementation 'org.jooq:jooq:3.12.3'
  implementation 'org.json:json:20160810'
  implementation 'org.reflections:reflections:0.9.11'
  implementation 'org.slf4j:log4j-over-slf4j:1.7.13'
  implementation 'org.slf4j:slf4j-api:1.7.5'
  implementation 'org.yaml:snakeyaml:1.18'
  testImplementation 'com.github.tomakehurst:wiremock-jre8:2.26.3'
  testImplementation 'junit:junit:4.12'
  testImplementation 'org.assertj:assertj-core:3.8.0'
  testImplementation 'org.eclipse.jetty:jetty-client:9.4.26.v20200117'
  testImplementation 'org.hamcrest:hamcrest-library:1.3'
  testImplementation 'org.mockito:mockito-core:1.10.19'
}

jar {
  manifest {
    attributes 'Main-Class': 'io.xj.nexus.Main'
  }
}

applicationDefaultJvmArgs = [
//  "-javaagent:/usr/local/dd-java-agent.jar",
"-Xmx3500m"
]

application {
  mainClassName = 'io.xj.nexus.Main'
}

group = 'io.xj'
description = 'nexus'
version = '1.0'

java {
  sourceCompatibility = JavaVersion.VERSION_14
  targetCompatibility = JavaVersion.VERSION_14
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

jacocoTestReport {
  reports {
    xml.enabled true
  }
}

jib {
  to.image = '027141088039.dkr.ecr.us-east-1.amazonaws.com/xj/nexus'
  from.image = '027141088039.dkr.ecr.us-east-1.amazonaws.com/xj/base/nexus:v0.4'
  container.jvmFlags = ["-Djava.library.path=/usr/lib/x86_64-linux-gnu"]
}


// For access to private GitHub packages
def props = getGithubPropertiesFromFile('./github.properties')
def githubUsername = getGithubUsername(props)
def githubPassword = getGithubPassword(props)

repositories {
  mavenCentral()
  mavenLocal()
  maven {
    name = 'GitHubPackages'
    url = 'https://maven.pkg.github.com/xjmusic/protocol'
    credentials {
      username = githubUsername
      password = githubPassword
    }
  }
}

static String getGithubUsername(Properties props) {
  String value
  if (props.getProperty('github.username')) {
    value = props.getProperty('github.username')
    println 'Github username (from property github.username): ' + value
  } else {
    value = System.getenv('GITHUB_USERNAME')
    if (!value) throw new Exception('Could not find required env GITHUB_USERNAME or prop "github.username"')
    println 'Github username (from env GITHUB_USERNAME): ' + value
  }
  return value
}

static String getGithubPassword(Properties props) {
  String value
  if (props.getProperty('github.token')) {
    value = props.getProperty('github.token')
    println 'Github password (from property github.token): ' + value.length() + ' characters'
  } else {
    value = System.getenv('GITHUB_TOKEN')
    if (!value) throw new Exception('Could not find required env GITHUB_TOKEN or prop "github.token"')
    println 'Github password (from env GITHUB_TOKEN): ' + value.length() + ' characters'
  }
  return value
}

Properties getGithubPropertiesFromFile(String pathToGithubPropertiesFile) {
  def githubPropertiesFile = file(pathToGithubPropertiesFile)
  def props = new Properties()
  if (githubPropertiesFile.exists()) {
    println('Will read Github properties from ' + pathToGithubPropertiesFile)
    githubPropertiesFile.withInputStream { props.load(it) }
  }
  return props
}
