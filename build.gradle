// Copyright (c) XJ Music Inc. (https://xj.io) All Rights Reserved.
//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility

import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.Credentials
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
  id "de.undercouch.download" version "4.1.2"
  id "org.flywaydb.flyway" version "7.5.4"
  id "org.openapi.generator" version "4.2.2"
  id 'application'
  id 'com.google.cloud.tools.jib' version '3.1.1'
  id 'distribution'
  id 'jacoco'
  id 'java'
  id 'maven'
  id 'nu.studer.jooq' version '4.1'
  id 'org.ajoberstar.grgit' version '4.1.0'
  id "org.sonarqube" version "3.3"
}

group = 'io.xj'
version = '1.0'

description = 'XJ Music platform backend services'

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

jacocoTestReport {
  reports {
    xml.enabled true
  }
}

apply plugin: 'java'

repositories {
  mavenLocal()
  maven {
    url = 'https://repo.maven.apache.org/maven2'
  }
  maven {
    url = 'https://packages.confluent.io/maven/'
  }
}

dependencies {
  implementation 'ch.qos.logback:logback-classic:1.2.3'
  implementation 'com.amazonaws:aws-java-sdk-secretsmanager:1.12.7'
  implementation 'com.amazonaws:aws-java-sdk:1.11.119'
  implementation 'com.fasterxml.jackson.core:jackson-annotations:2.10.1'
  implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.10.2.1'
  implementation 'com.fasterxml.jackson.module:jackson-module-guice:2.10.3'
  implementation 'com.github.axet:TarsosDSP:2.4-1'
  implementation 'com.github.rholder:snowball-stemmer:1.3.0.581.1'
  implementation 'com.google.api-client:google-api-client:1.30.9'
  implementation 'com.google.apis:google-api-services-plus:v1-rev590-1.25.0'
  implementation 'com.google.guava:guava:28.2-jre'
  implementation 'com.google.inject.extensions:guice-assistedinject:5.0.1'
  implementation 'com.google.inject:guice:5.0.1'
  implementation 'com.typesafe:config:1.4.0'
  implementation 'com.zaxxer:HikariCP:3.4.1'
  implementation 'commons-codec:commons-codec:1.10'
  implementation 'commons-io:commons-io:2.6'
  implementation 'javax.activation:activation:1.1'
  implementation 'javax.cache:cache-api:1.1.1'
  implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
  implementation 'me.xdrop:fuzzywuzzy:1.1.9'
  implementation 'net.logstash.logback:logstash-logback-encoder:6.6'
  implementation 'org.apache.httpcomponents:httpclient:4.5.8'
  implementation 'org.eclipse.jetty:jetty-server:9.4.26.v20200117'
  implementation 'org.eclipse.jetty:jetty-servlet:9.4.26.v20200117'
  implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.33'
  implementation 'org.glassfish.jersey.core:jersey-server:2.33'
  implementation 'org.glassfish.jersey.inject:jersey-hk2:2.33'
  implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:2.33'
  implementation 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-simple:2.33'
  implementation 'org.jooq:jooq-codegen:3.12.3'
  implementation 'org.jooq:jooq:3.12.3'
  implementation 'org.json:json:20160810'
  implementation 'org.reflections:reflections:0.9.11'
  implementation 'org.slf4j:log4j-over-slf4j:1.7.13'
  implementation 'org.slf4j:slf4j-api:1.7.5'
  implementation 'org.yaml:snakeyaml:1.18'
  implementation 'software.amazon.awssdk:cloudwatch:2.17.20'
  testImplementation 'com.github.tomakehurst:wiremock-jre8:2.26.3'
  testImplementation 'junit:junit:4.12'
  testImplementation 'org.assertj:assertj-core:3.8.0'
  testImplementation 'org.eclipse.jetty:jetty-client:9.4.26.v20200117'
  testImplementation 'org.hamcrest:hamcrest-library:1.3'
  testImplementation 'org.mockito:mockito-core:3.2.4'
}

jar {
  manifest {
    attributes 'Main-Class': 'io.xj.nexus.Main'
  }
}

applicationDefaultJvmArgs = [
"-Xmx3500m"
]

application {
  mainClassName = 'io.xj.nexus.Main'
}

group = 'io.xj'
description = 'nexus'
version = '1.0'

java {
  sourceCompatibility = JavaVersion.VERSION_14
  targetCompatibility = JavaVersion.VERSION_14
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

jacocoTestReport {
  reports {
    xml.enabled true
  }
}

jib {
  to.image = '027141088039.dkr.ecr.us-east-1.amazonaws.com/xj/nexus'
  from.image = '027141088039.dkr.ecr.us-east-1.amazonaws.com/xj/base/nexus:v0.4'
  container.jvmFlags = ["-Djava.library.path=/usr/lib/x86_64-linux-gnu"]
}


// For access to private GitHub packages
def props = getGithubPropertiesFromFile('./github.properties')
def githubUsername = getGithubUsername(props)
def githubPassword = getGithubPassword(props)

repositories {
  mavenCentral()
  mavenLocal()
  maven {
    name = 'GitHubPackages'
    url = 'https://maven.pkg.github.com/xjmusic/protocol'
    credentials {
      username = githubUsername
      password = githubPassword
    }
  }
}

static String getGithubUsername(Properties props) {
  String value
  if (props.getProperty('github.username')) {
    value = props.getProperty('github.username')
    println 'Github username (from property github.username): ' + value
  } else {
    value = System.getenv('GITHUB_USERNAME')
    if (!value) throw new Exception('Could not find required env GITHUB_USERNAME or prop "github.username"')
    println 'Github username (from env GITHUB_USERNAME): ' + value
  }
  return value
}

static String getGithubPassword(Properties props) {
  String value
  if (props.getProperty('github.token')) {
    value = props.getProperty('github.token')
    println 'Github password (from property github.token): ' + value.length() + ' characters'
  } else {
    value = System.getenv('GITHUB_TOKEN')
    if (!value) throw new Exception('Could not find required env GITHUB_TOKEN or prop "github.token"')
    println 'Github password (from env GITHUB_TOKEN): ' + value.length() + ' characters'
  }
  return value
}

Properties getGithubPropertiesFromFile(String pathToGithubPropertiesFile) {
  def githubPropertiesFile = file(pathToGithubPropertiesFile)
  def props = new Properties()
  if (githubPropertiesFile.exists()) {
    println('Will read Github properties from ' + pathToGithubPropertiesFile)
    githubPropertiesFile.withInputStream { props.load(it) }
  }
  return props
}


// Compile each input .yaml file TO THE SAME OUTPUT DIR
// so that duplicate classes are overwritten.
// wipeOutputDir = false so that everyone writes their files to the same destination
// REF https://app.asana.com/0/1128782737102755/1200411113458752/f
task generateCommon(type: GenerateTask) {
  generatorName = "jaxrs-spec"
  inputSpec = "${buildDir.absolutePath}/api-spec/common.yaml".toString()
  outputDir = "${buildDir.absolutePath}/openapi-codegen".toString()
  apiPackage = "io.xj.api"
  invokerPackage = "io.xj.api"
  modelPackage = "io.xj.api"
  configOptions = [
    validateSpec         : "false",
    dateLibrary          : "java14",
    useGenericResponse   : "true",
    openApiNullable      : "true",
    useSwaggerAnnotations: "false"
  ]
}

task generateInstruments(type: GenerateTask) {
  generatorName = "jaxrs-spec"
  inputSpec = "${buildDir.absolutePath}/api-spec/instruments.yaml".toString()
  outputDir = "${buildDir.absolutePath}/openapi-codegen".toString()
  apiPackage = "io.xj.api.instrument"
  invokerPackage = "io.xj.api"
  modelPackage = "io.xj.api"
  configOptions = [
    validateSpec         : "false",
    dateLibrary          : "java14",
    useGenericResponse   : "true",
    openApiNullable      : "true",
    useSwaggerAnnotations: "false"
  ]
}

task generatePrograms(type: GenerateTask) {
  generatorName = "jaxrs-spec"
  inputSpec = "${buildDir.absolutePath}/api-spec/programs.yaml".toString()
  outputDir = "${buildDir.absolutePath}/openapi-codegen".toString()
  apiPackage = "io.xj.api.program"
  invokerPackage = "io.xj.api"
  modelPackage = "io.xj.api"
  configOptions = [
    validateSpec         : "false",
    dateLibrary          : "java14",
    useGenericResponse   : "true",
    openApiNullable      : "true",
    useSwaggerAnnotations: "false"
  ]
}

task generateLibraries(type: GenerateTask) {
  generatorName = "jaxrs-spec"
  inputSpec = "${buildDir.absolutePath}/api-spec/libraries.yaml".toString()
  outputDir = "${buildDir.absolutePath}/openapi-codegen".toString()
  apiPackage = "io.xj.api.library"
  invokerPackage = "io.xj.api"
  modelPackage = "io.xj.api"
  configOptions = [
    validateSpec         : "false",
    dateLibrary          : "java14",
    useGenericResponse   : "true",
    openApiNullable      : "true",
    useSwaggerAnnotations: "false"
  ]
}

task generateAccounts(type: GenerateTask) {
  generatorName = "jaxrs-spec"
  inputSpec = "${buildDir.absolutePath}/api-spec/accounts.yaml".toString()
  outputDir = "${buildDir.absolutePath}/openapi-codegen".toString()
  apiPackage = "io.xj.api.account"
  invokerPackage = "io.xj.api"
  modelPackage = "io.xj.api"
  configOptions = [
    validateSpec         : "false",
    dateLibrary          : "java14",
    useGenericResponse   : "true",
    openApiNullable      : "true",
    useSwaggerAnnotations: "false"
  ]
}

task generateUsers(type: GenerateTask) {
  generatorName = "jaxrs-spec"
  inputSpec = "${buildDir.absolutePath}/api-spec/users.yaml".toString()
  outputDir = "${buildDir.absolutePath}/openapi-codegen".toString()
  apiPackage = "io.xj.api.user"
  invokerPackage = "io.xj.api"
  modelPackage = "io.xj.api"
  configOptions = [
    validateSpec         : "false",
    dateLibrary          : "java14",
    useGenericResponse   : "true",
    openApiNullable      : "true",
    useSwaggerAnnotations: "false"
  ]
}

task generateChains(type: GenerateTask) {
  generatorName = "jaxrs-spec"
  inputSpec = "${buildDir.absolutePath}/api-spec/chains.yaml".toString()
  outputDir = "${buildDir.absolutePath}/openapi-codegen".toString()
  apiPackage = "io.xj.api.chain"
  invokerPackage = "io.xj.api"
  modelPackage = "io.xj.api"
  configOptions = [
    validateSpec         : "false",
    dateLibrary          : "java14",
    useGenericResponse   : "true",
    openApiNullable      : "true",
    useSwaggerAnnotations: "false"
  ]
}

task generateSegments(type: GenerateTask) {
  generatorName = "jaxrs-spec"
  inputSpec = "${buildDir.absolutePath}/api-spec/segments.yaml".toString()
  outputDir = "${buildDir.absolutePath}/openapi-codegen".toString()
  apiPackage = "io.xj.api.segment"
  invokerPackage = "io.xj.api"
  modelPackage = "io.xj.api"
  configOptions = [
    validateSpec         : "false",
    dateLibrary          : "java14",
    useGenericResponse   : "true",
    openApiNullable      : "true",
    useSwaggerAnnotations: "false"
  ]
}

sourceSets {
  main {
    java {
      srcDir "${buildDir.absolutePath}/openapi-codegen/src/gen/java"
    }
    resources {
      srcDir "${buildDir.absolutePath}/openapi-codegen/src/gen/resources"
    }
  }
}

task cloneSpecs {
  def folder = new File("${buildDir.absolutePath}/api-spec")
  if (!folder.exists()) {
    println "Cloning specs repo."
    //noinspection GroovyAccessibility,GroovyAssignabilityCheck
    Grgit.clone(dir: "${buildDir.absolutePath}/api-spec", uri: "https://github.com/xjmusic/api-spec", credentials: new Credentials(githubUsername, githubPassword))
  } else {
    if (System.getenv("CI") == "true") {
      return
    }

    // Always keep up to date with master if we're developing locally.
    println "Updating specs repo."
    def specRepo = Grgit.open(dir: "${buildDir.absolutePath}/api-spec", credentials: new Credentials(githubUsername, githubPassword))
    specRepo.pull()
  }
}

// All generators depend on cloning the specs
tasks.generateCommon.dependsOn project.cloneSpecs
tasks.generateInstruments.dependsOn project.cloneSpecs
tasks.generatePrograms.dependsOn project.cloneSpecs
tasks.generateLibraries.dependsOn project.cloneSpecs
tasks.generateAccounts.dependsOn project.cloneSpecs
tasks.generateUsers.dependsOn project.cloneSpecs
tasks.generateChains.dependsOn project.cloneSpecs
tasks.generateSegments.dependsOn project.cloneSpecs

// Compilation depends on generating all specs
compileJava.dependsOn tasks.generateCommon
compileJava.dependsOn tasks.generateInstruments
compileJava.dependsOn tasks.generatePrograms
compileJava.dependsOn tasks.generateLibraries
compileJava.dependsOn tasks.generateAccounts
compileJava.dependsOn tasks.generateUsers
compileJava.dependsOn tasks.generateChains
compileJava.dependsOn tasks.generateSegments
