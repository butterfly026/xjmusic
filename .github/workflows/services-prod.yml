name: "Production CI"

on:
  push:
    branches:
      - prod

jobs:
  CI:
    env:
      CI_BOT_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
      CI_BOT_USERNAME: ${{ secrets.CI_BOT_USERNAME }}
    name: Production CI
    runs-on: ubuntu-20.04

    #
    services:
      #
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      #
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 30s
          --health-retries 10
        ports:
          - 5432:5432

    steps:
      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get -y install ffmpeg
          sudo apt-get -y install gpac
          sudo apt-get -y install postgresql-client
          sudo apt-get -y install amazon-ecr-credential-helper

      - name: Ensure Postgres started OK
        run: sudo docker start $(docker ps -a -q)

      - name: Setup JDK 16
        uses: actions/setup-java@v1
        with:
          java-version: 16
          java-package: jdk

      - name: Create Postgres databases
        # while ! nc -vzw 5 localhost 5432; do sleep 1; done
        run: |
          createdb -h localhost -p 5432 -U postgres xj_test
        env:
          PGPASSWORD: postgres

      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build & Run Tests
        run: "./gradlew --info --no-daemon build test"
        continue-on-error: false

      - name: Nothing left TODO
        run: .github/nothing_left_todo.sh

      - name: (AWS) Configure Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: (AWS) Login to Elastic Container Registry (ECR)
        uses: aws-actions/amazon-ecr-login@v1

      - name: (AWS) Authenticate with Elastic Kubernetes Service (EKS)
        run: aws eks --region ${{ secrets.AWS_DEFAULT_REGION }} update-kubeconfig --name ${{ secrets.CLUSTER_NAME }}

      - name: (AWS) Update the aws-cli (aws cli v1) to the version with a fix for
        run: pip3 install awscli --upgrade --user

      - name: (AWS) rewrite the kube-config
        run: aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME} --region ${REGION}

      - name: (AWS) Build & push Docker images
        run: |
          ./gradlew --info --no-daemon \
            -PjibFromImage=027141088039.dkr.ecr.us-east-1.amazonaws.com/xj/base:latest \
            -PjibToImageRegistry=027141088039.dkr.ecr.us-east-1.amazonaws.com/xj \
            jib
        continue-on-error: false

      - name: (AWS) Kubernetes rollout Lab/Hub
        run: kubectl -n lab rollout restart deployment/hub

      - name: (GCP) Authenticate and setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: (GCP) Configure Kubernetes credentials for GKE
        env:
          GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
          GKE_REGION: ${{ secrets.GKE_REGION }}
        run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GKE_REGION"

      - name: (GCP) Build & push Docker images
        run: |
          ./gradlew --info --no-daemon \
            -PjibFromImage=gcr.io/xj-vpc-host-prod/base:latest \
            -PjibToImageRegistry=gcr.io/xj-vpc-host-prod \
            jib
        continue-on-error: false

      - name: (GCP) Kubernetes rollout Lab/Nexus
        run: kubectl -n lab rollout restart deployment/nexus

      - name: (GCP) Kubernetes rollout Lab/OpenSpace
        run: kubectl -n yard rollout restart deployment/openspace-nexus deployment/openspace-ship

      - name: (GCP) Kubernetes rollout Lab/CoolAir
        run: kubectl -n yard rollout restart deployment/coolair-nexus deployment/coolair-ship
