#!/usr/bin/env bash

# Include common functions
. $( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/common/functions

## Require AWS Elastic Beanstalk CLI
#ensure_version "eb --version" "AWS Elastic Beanstalk CLI"

# apps, configs, static assets
APPS="hub worker"

# Must not have outstanding git changes
gitcheck ${PWD}

# Build all release artifacts
#
# UNLESS script is run with --no-build
#
if [ "${1}" = "--no-build" ]; then
  step "Skipping build!"
  step_ok
else
  bin/release_build || exit 1
fi

#
DATE="$(date -u +%Y.%m.%d-UTC.%H.%M.%S)"
COMMIT="$(git rev-parse --verify --short HEAD)"
VERSION="${DATE}-${COMMIT}"
RELEASE="xj-release-${VERSION}"
ZIP_FILE="${PWD}/target/${RELEASE}.zip"
step "Release ${VERSION}"
indent "${ZIP_FILE}"
step_ok

#
step "Clean target"
rm -fr ${PWD}/target
mkdir ${PWD}/target
step_ok

#
step "Add release # to target"
indent "./RELEASE ${RELEASE}"
echo "${RELEASE}" > ${PWD}/target/RELEASE
step_ok

#
step "Add Procfile to target"
indent "$(cat Procfile)"
cp ${PWD}/.config/Procfile ${PWD}/target/Procfile
step_ok

#
step "Add artifacts to target"
for APP in ${APPS}; do
  JAR=${APP}/target/${APP}-1.0-SNAPSHOT.jar
  indent "${JAR}"
  mkdir -p ${PWD}/target/${APP}/target
  cp ${JAR} ${PWD}/target/${JAR}
done
step_ok

#
step "Add all Elastic Beanstalk Extensions to target"
mkdir -p ${PWD}/target/.ebextensions
cp ${PWD}/.config/extensions/* \
   ${PWD}/target/.ebextensions/
step_ok

#
step "Add nginx locations for Elastic Beanstalk config to target"
mkdir -p ${PWD}/target/.ebextensions/nginx/conf.d/locations
cp ${PWD}/.nginx/locations.conf \
   ${PWD}/target/.ebextensions/nginx/conf.d/locations/00_application.conf
step_ok

#
step "Add Tomcat settings for Elastic Beanstalk config to target"
mkdir -p ${PWD}/target/.ebsettings
cp ${PWD}/.config/tomcat-settings.config \
   ${PWD}/target/.ebsettings/tomcat-settings.config
step_ok

#
step "Add Hub UI to target"
indent "${PWD}/target/ui/hub-ui/dist"
mkdir -p ${PWD}/target/ui/hub-ui
cp -r ui/hub-ui/dist ${PWD}/target/ui/hub-ui/
step_ok

#
step "Add Player UI to target"
indent "${PWD}/target/ui/player-ui/dist"
mkdir -p ${PWD}/target/ui/player-ui
cp -r ui/player-ui/dist ${PWD}/target/ui/player-ui/
step_ok

#
step "Add app bootstrap to target"
indent "${PWD}/target/bin/bootstrap"
mkdir -p ${PWD}/target/bin/
cp ${PWD}/bin/common/bootstrap ${PWD}/target/bin/
step_ok

#
step "Add .config/.env.production"
indent "(set secret environment vars via the 'eb' CLI)"
indent "${PWD}/target/.env"
cp ${PWD}/.config/.env.production ${PWD}/target/.env
step_ok

#
step "Add .config/bin/*"
indent "$(ls ${PWD}/.config/bin/*)"
cp ${PWD}/.config/bin/* ${PWD}/target/bin/
step_ok

#
step "Add bin/common/*"
indent "$(ls ${PWD}/bin/common/*)"
cp -r ${PWD}/bin/common ${PWD}/target/bin/
step_ok

#
step "Add bin/mysql/*"
indent "$(ls ${PWD}/bin/mysql/*)"
cp -r ${PWD}/bin/mysql ${PWD}/target/bin/
step_ok

#
step "Compress target to ZIP file"
cd ${PWD}/target
FILES=$(ls -a | grep -v '^\.$' | grep -v '^\.\.$')
for FILE in ${FILES}; do
  indent ${FILE}
  zip -r ${ZIP_FILE} ${FILE}
done
step_ok

#
step "Ready to release ZIP file"
unzip -l ${ZIP_FILE}
step_ok

##
#step "Deploy with Elastic Beanstalk"
#RELEASE="xj-release-${VERSION}"
#indent "${RELEASE}"
#eb deploy --label "${RELEASE}"
#step_ok

#
step "Released ${RELEASE}"
step_ok

#
finished_ok
