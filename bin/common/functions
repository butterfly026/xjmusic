#!/usr/bin/env bash

# Workflow Dependencies
deps() {
  ensure_version "docker version" "Docker Engine"
  ensure_version "docker-compose version" "Docker Compose"
  ensure_version "java -version" "Java"
  ensure_version "mvn -version" "Maven"
  ensure_version "node -v" "NodeJS"
  ensure_version "npm -v" "NPM"
  ensure_version "ember -v" "EmberJS CLI"
  ensure_version "phantomjs -v" "PhantomJS"
  ensure_or_copy_file "${PWD}/runtime.env" "Environment variables file" "${PWD}/default.env"
}

# Docker
DOCKER_COMPOSE="docker-compose -f container/docker-compose.yml"
ensure_no_docker_named() {
    NAME=${1}
    if [[ $(docker ps --all --format '{{.Names}}' | grep ${NAME}) ]]; then
        step "Removing ${NAME}"
        indent "$(docker rm -f ${NAME})"
        step_ok
    fi
}

# base path
BASEPATH=$(pwd)

# cool ascii bro █▓▒░
intro () {
    echo ''
    echo '───────▐▀▄──────▄▀▌───▄▄▄▄▄▄▄─────────────────'
    echo '───────▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄──────────────'
    echo '──────▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄────────────'
    echo '──────▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄──────────'
    echo '────▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌─────────'
    echo '────▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐───▄▄────'
    echo '────▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌▄█▒█────'
    echo '────▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐▒█▀─────'
    echo '────▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐▀───────'
    echo '────▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌────────'
    echo '─────▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐─────────'
    echo '─────▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌─────────'
    echo '──────▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐──────────'
    echo '──────▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌──────────'
    echo '────────▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀────────────'
    echo ''
    }
step () {
  TEXT=${1}
  printf "\\n██ ${TEXT}\n"
}
step_ok () { printf "░░ OK\\n"; }
finished_ok () {
  cd ${BASEPATH}
  printf "\\n██ Finished ${0} OK\n\n"
}
indent () {
  TEXT=${1}
  printf "${TEXT}\n" | sed '/^$/d' | sed 's/^/      /g'
}

# Ensuring Workflow Dependencies
ensure_version () {
  CMD=${1}
  TEXT=${2}
  step "Ensure ${TEXT}"
  VERSION=$(${CMD}) || exit 1
  indent "${VERSION}"
  step_ok
}
ensure_nslookup () {
  ADDR=${1}
  TEXT=${2}
  step "Ensure ${TEXT}"
  if ! nslookup ${ADDR} &> /dev/null
  then
    printf "Cannot lookup ${ADDR}! Please ensure ${TEXT}.\n"
    exit 1
  fi
  step_ok
}
ensure_file () {
  PATH=${1}
  TEXT=${2}
  if [ ! -f ${PATH} ]; then
    printf "Cannot find ${PATH}! Please ensure ${TEXT}.\n"
    exit 1
  fi
}
ensure_or_copy_file () {
  PATH=${1}
  TEXT=${2}
  SRC_PATH=${3}
  if [ ! -f ${PATH} ]; then
    step "Creating new ${TEXT} from template ${SRC_PATH}."
    printf "      ${PATH}\n"
    /bin/cp ${SRC_PATH} ${PATH}
    step_ok
  fi
}
ensure_dir () {
  PATH=${1}
  TEXT=${2}
  if [ ! -d ${PATH} ]; then
    printf "Cannot find ${PATH}! Please ensure ${TEXT}.\n"
    exit 1
  fi
}
# color output
RED=`tput setaf 1`
GREEN=`tput setaf 2`
RESET=`tput sgr0`

# git check for un-committed/pushed changes
function gitcheck() {
  target=${1}
  if [ ! -d ${target} ]; then
    step "no files found"
    return
  fi

  BRANCH=$(cd ${target} && git symbolic-ref -q HEAD)
  BRANCH=${BRANCH##refs/heads/}
  BRANCH=${BRANCH:-HEAD}
  diffs=$(cd ${target} && git diff ${BRANCH})
  if [ -n "$diffs" ]; then
    printf "\n${RED}ERROR!${RESET} Outstanding git changes detected. Details follow:\n\n"
    cd ${target} && git status
    exit 1
  fi
}

# execute
function execute() {
  z=${1}
  printf "${z}\n"
	eval ${z}
}

# destroy folder
function destroy() {
  execute "rm -fr ${1}"
}

# generic clean-up recursively by file name
function clean_all_named() {
  execute "find ${BASEPATH} -name \"${1}\" -exec rm -fr \"{}\" \;"
}

