#!/usr/bin/env bash

#
wait_until () {
  CMD="${1}"
  while ! eval "${CMD}"; do
    printf "Waiting for ${CMD}...\n"
    sleep 1
  done
  printf "${CMD}.\n"
}

#
require () {
  VALUE="${1}"
  NAME="${2}"
  if [[ "${VALUE}" == "" ]]; then
    printf "\nERROR! <${NAME}> is required.\n"
    exit 1
  fi
}

#
require "${APP_NAME}" "APP_NAME environment variable"
require "${APP_VERSION}" "APP_VERSION environment variable"
#
printf "\n[xj:docker]\n"

#
CONFIG_PATH=/var/app/current/env.conf
if [[ ! -e ${CONFIG_PATH} ]]; then
  printf "\n\nCan't find ${CONFIG_PATH}!\nPlease ensure configuration file exists.\n\n"
  exit 1
fi

#
TAR_NAME="${APP_NAME}-${APP_VERSION}.tar"
TAR_FOLDER="/var/app"
if [[ ! -e ${TAR_FOLDER}/${TAR_NAME} ]]; then
  printf "\n\nCan't find ${TAR_FOLDER}/${TAR_NAME}!\nPlease package the build artifacts.\n\n"
  exit 1
fi

#
cd ${TAR_FOLDER}
tar -xf ${TAR_NAME}
APP_PATH="${TAR_FOLDER}/${APP_NAME}-${APP_VERSION}"
if [[ ! -e ${APP_PATH} ]]; then
  printf "\n\nCan't find ${APP_PATH}!\nSomething went wrong unpacking the build artifacts.\n\n"
  exit 1
fi

#
LOG_DIR=/var/log/${APP_NAME}
mkdir -p ${LOG_DIR}

#
STDOUT_LOG=${LOG_DIR}/${APP_NAME}.out.log
STDERR_LOG=${LOG_DIR}/${APP_NAME}.err.log

#
ACCESS_LOG=${LOG_DIR}/${APP_NAME}.access.log
touch ${ACCESS_LOG}
chmod +w ${ACCESS_LOG}

#
printf "[$(date)]\n"
printf "Starting ${APP_PATH}/bin/${APP_NAME}\n"
printf "       config: ${CONFIG_PATH}\n"
printf "   stdout log: ${STDOUT_LOG}\n"
printf "   stderr log: ${STDERR_LOG}\n"
printf "   access log: ${ACCESS_LOG}\n"
cd ${APP_PATH}
bin/${APP_NAME} ${CONFIG_PATH} 1> ${STDOUT_LOG} 2> ${STDERR_LOG} &

# interactive tty
printf "\nLogging in...\n"
/bin/bash
