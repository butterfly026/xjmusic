#!/usr/bin/env bash

# messages and colors
message_prefix="[ui/web-player]"
RED=`tput setaf 1`
GREEN=`tput setaf 2`
RESET=`tput sgr0`

# base path
BASE_PATH=$(pwd)

# release path
RELEASE_PATH="${BASE_PATH}/release"

# release target public repo
RELEASE_REPOSITORY="git@github.com:xjmusic/web-player.git"

# git check for un-committed/pushed changes
function ensure_no_git_changes() {
  target=${1}
  if [ ! -d ${target} ]; then
    printf "\n${RED}ERROR!${RESET} Cannot check git changes for nonexistent target directory.\n"
    exit 1
    return
  fi

  BRANCH=$(cd ${target} && git symbolic-ref -q HEAD)
  BRANCH=${BRANCH##refs/heads/}
  BRANCH=${BRANCH:-HEAD}
  diffs=$(cd ${target} && git diff ${BRANCH})
  if [ -n "$diffs" ]; then
    printf "\n${RED}ERROR!${RESET} Outstanding git changes detected. Details follow:\n\n"
    cd ${target} && git status
    exit 1
  fi

  printf "\n${GREEN}OK${RESET} No outstanding git changes detected.\n"
}

# if release folder already exists there are git changes in release path, fail
# otherwise, clone the release repo into the release folder
if [ -d ${RELEASE_PATH} ]; then
  printf "\n${GREEN}Found${RESET} release in ${RELEASE_PATH}\nWill check for git changes in release folder"
  ensure_no_git_changes ${RELEASE_PATH}
  cd ${RELEASE_PATH} && git pull || exit 1
  cd ${BASE_PATH}
else
  echo "No release found. Begin by cloning ${RELEASE_REPOSITORY}"
  git clone "${RELEASE_REPOSITORY}" "${RELEASE_PATH}"
  printf "\n${GREEN}OK${RESET} No outstanding git changes detected.\n"
fi

# copy all files from this project to the target release repository
#cp -fr ${BASE_PATH}/* ${RELEASE_PATH}/
rsync -av --progress . ${RELEASE_PATH} \
  --exclude release \
  --exclude build \
  --exclude node_modules \
  --exclude *.iml \
  --exclude .idea \
  --exclude .git \
